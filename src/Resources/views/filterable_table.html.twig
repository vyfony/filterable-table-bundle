{% macro render_table(table) %}
    <table class="table table-striped table-sm" data-vyfony-filterable-table>
        <thead>
            <tr>
                {% if table.hasCheckboxColumn %}
                    <th>
                        <div class="custom-control custom-checkbox">
                            {% set mainCheckboxId = 'data-vyfony-filterable-table-main-checkbox' %}
                            <input type="checkbox" id="{{ mainCheckboxId }}" class="custom-control-input"/>
                            <label class="custom-control-label" for="{{ mainCheckboxId }}">&#8203;</label>
                        </div>
                    </th>
                {% endif %}
                {% for columnMetadata in table.columnMetadataCollection %}
                    <th
                        {% if columnMetadata.isSortable -%}
                            data-vyfony-filterable-table-sortable
                        {%- endif %}
                        {% if table.queryParameters.sortBy is same as(columnMetadata.name) -%}
                            data-vyfony-filterable-table-sort-order="{{ table.queryParameters.sortOrder }}"
                        {%- endif %}
                    >
                        {% if columnMetadata.isSortable %}
                            <a href="{{ path(table.listRoute, columnMetadata.sortParameters) }}">
                                {{ columnMetadata.label|trans }}
                            </a>
                        {% else %}
                            <span>{{ columnMetadata.label|trans }}</span>
                        {% endif %}
                    </th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for rowData in table.rowDataCollection %}
                {% set routeParameters = {} %}
                {% for parameterName, attributeName in table.showRouteParameters %}
                    {% set routeParameters = routeParameters|merge({(parameterName): attribute(rowData, attributeName)}) %}
                {% endfor %}
                <tr>
                    {% if table.hasCheckboxColumn %}
                        <td>
                            <div class="custom-control custom-checkbox">

                                {% set identifier = routeParameters | json_encode %}
                                {% set checkboxId = 'data-vyfony-filterable-table-checkbox-' ~ identifier %}

                                <input type="checkbox"
                                       id="{{ checkboxId }}"
                                       class="custom-control-input"
                                       data-vyfony-filterable-table-checkbox="{{ identifier }}"
                                />
                                <label class="custom-control-label" for="{{ checkboxId }}">&#8203;</label>
                            </div>
                        </td>
                    {% endif %}
                    {% for columnMetadata in table.columnMetadataCollection %}
                        {% if columnMetadata.isIdentifier %}
                            <th scope="row">
                                <a href="{{ path(table.showRoute, routeParameters) }}">
                                    {{ attribute(rowData, columnMetadata.name) }}
                                </a>
                            </th>
                        {% else %}
                            <td>
                                <span>{{ columnMetadata.getValue(rowData) }}</span>
                            </td>
                        {% endif %}
                    {% endfor %}
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% endmacro %}

{% macro render_paginator(table) %}
    {% if table.hasPaginator %}
        <ul class="pagination justify-content-center">

            {% set lastRenderedPageIndex = null %}

            {% for page in table.paginator.visiblePages %}

                {% if lastRenderedPageIndex is not null and page.index is not same as(lastRenderedPageIndex + 1) %}
                    <li class="page-item disabled">
                        <a class="page-link" href="#">..</a>
                    </li>
                {% endif %}

                <li class="page-item{% if table.paginator.isPageCurrent(page) %} active{% endif %}">
                    <a class="page-link" href="{{ page.url }}">{{ page.index }}</a>
                </li>

                {% set lastRenderedPageIndex = page.index %}
            {% endfor %}
        </ul>
    {% endif %}
{% endmacro %}

{% macro render_checkbox_handlers(table) %}
    {% if (table.hasCheckboxColumn) %}

        {% for checkboxHandler in table.checkboxHandlers %}
            <button type="button"
                    class="btn btn-default"
                    data-vyfony-filterable-table-checkbox-handler-button="{{ path(checkboxHandler.routeName) }}"
            >
                {{ checkboxHandler.label|trans }}
            </button>
        {% endfor %}

        <script type="text/javascript">
            window.onload = function () {

                const checkboxAttribute = 'data-vyfony-filterable-table-checkbox';
                const checkboxHandlerButtonAttribute = 'data-vyfony-filterable-table-checkbox-handler-button';

                const mainCheckboxElement = document.querySelector('#data-vyfony-filterable-table-main-checkbox');
                const rowCheckboxElements = Object.values(
                    document.querySelectorAll(`input[type="checkbox"][${checkboxAttribute}]`)
                );

                mainCheckboxElement.onclick = () => {
                    rowCheckboxElements.forEach(rowCheckboxElement => {
                        rowCheckboxElement.checked = mainCheckboxElement.checked
                    });
                };

                rowCheckboxElements.forEach(rowCheckboxElement => {
                    rowCheckboxElement.onclick = () => {
                        mainCheckboxElement.checked = rowCheckboxElements.every(oneOfRowCheckboxElements => {
                            return true === oneOfRowCheckboxElements.checked;
                        });

                        mainCheckboxElement.indeterminate = !rowCheckboxElements.every(oneOfRowCheckboxElements => {
                            return rowCheckboxElements[0].checked === oneOfRowCheckboxElements.checked;
                        });
                    }
                });

                document.querySelectorAll(`[${checkboxHandlerButtonAttribute}]`).forEach(buttonElement => {
                    buttonElement.onclick = () => {

                        const rowIdentifiers = rowCheckboxElements
                            .filter(checkboxElement => checkboxElement.checked)
                            .map(checkboxElement => checkboxElement.attributes[checkboxAttribute].value)
                            .map(formattedRowIdentifier => JSON.parse(formattedRowIdentifier));

                        const actionUrl = buttonElement.attributes[checkboxHandlerButtonAttribute].value;

                        const searchParams = new URLSearchParams();

                        searchParams.set('rowIdentifiers', JSON.stringify(rowIdentifiers));

                        window.location = `${actionUrl}?${searchParams.toString()}`;
                    }
                });
            };
        </script>
    {% endif %}
{% endmacro %}

{% macro render_filter(filterForm) %}
    {% form_theme filterForm '@VyfonyFilterableTable/filterable_table_form_layout.html.twig' %}
    {{ form(filterForm) }}
{% endmacro %}